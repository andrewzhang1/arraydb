ArrayDB - C++ Lightning Fast Database Client

HOW TO INSTALL:
==============================================================================

As any user, execute:
$ ./install.sh



HOW TO USE INTERACTIVE SHELL:
==============================================================================
Usage:

Run the client program 'adb' from any user account:

$ adb -u test -p test -d test -h 127.0.0.1:8888 
$ adb -u test -p test -d test 
  (Default host is 127.0.0.1 and default port is 8888 as specified in $HOME/arraydb/conf/arraydb.conf)


Create table:
---------------------------------------------------------------------------------
adb>  create table user ( key: uid char(20), zip char(12), value:  city char(32), score int(6), fill char(300) );
adb>  create table product ( key: prodid char(20), value:  color char(32), price int(6), review char(300) );
adb>  create table product ( key: prodid char(20), value:  anything char(1024) );


Insert data:
---------------------------------------------------------------------------------
Key fields are required. Value fields can be anything as long they fit into the total space in the value setion of schema.
In other words, the key part has schema. The value part does not have schema. Any value fields can be
inserted into the value part as long the space has enough capacity specified in the create table command.

adb>  insert into user ( uid, zip, city, score, wechat ) values ( 'larryzhou', '993842', shanghai, 180, 'larryzhouwx' ); );
adb>  insert into user ( uid, zip, email, phone ) values ( 'larryzhou', 993842, 'tliu@yahoo.com', 'larryzhouwx' ); );
adb>  insert into product ( prodid, wt, ht, sz, yr ) values ( cam100, 12, 30, big, 2009 );

(Short column names are recommended to have faster data write and read).


Load file:
-------------------------------------------------------------------------------------
adb> load file /path/input.txt into TABLE [format F] [columns terminated by C] [lines terminated by N] [quote terminated by Q];
(Instructions inside [ ] are optional)
Default values:
   columns terminated by: ','
   lines terminated by: '\n'
   columns are not quoted by any characters.

Example:
adb> load file /tmp/input.txt into user format V columns terminated by ',';
adb> load file /tmp/input.txt into user format V quote terminated by ''';
adb> load file /tmp/input.txt into user format H columns terminated by ',';
adb> load file /tmp/input.txt into user format H quote terminated by ''';
adb> load file /tmp/input.txt into user format N;
adb> load file /tmp/input.txt into user format N columns terminated by ',';
adb> load file /tmp/input.txt into user format N quote terminated by ''';

If the formar is H, then the first line of /tmp/input.txt should be a list of column names
separated by a comma ','. Example:  fname,lname,addr,phone,email,age

Format V:  key1,key2,key3,...,name1=value1,name2=value2,...
Format V:  'key1','key2','key3',...,name1='value1',name2='value2',...
Format H:  key2,key1,value3,key3,value1,...
Format H:  'key2','key1','value3','key3','value1',...
Format N:  native format recognized by adbserv:
           ddddddkkkkkkkkkkkddddddkkkkkkkddddddkkkkkkk|dddddd<rayrecord>


To create sample data for loading, you can use the genrand program. The output file
is genrand.out which can be loaded into tables from the adb client shell program.



Select data:
---------------------------------------------------------------------------------
adb> select * from user;
adb> select uid, city from user;
adb> select uid, city from user limit 100;
adb> select uid, province, phone from user limit 1000,100;
adb> select uid, city from user limit 100 outfile /tmp/mylogfile.txt
adb> select prodid, weight, size, model  from product where prodid='fei100' and ssn='dddddd';
adb> select * from product where prodid >= 'fei100' and ssn <= 'dddddd';
adb> select * from product where prodid between 'a000' and 'c123';


Join tables:
------------------------------------------------------------------------------------------------------
adb> select user.uid, user.city, user2.zip join (user, user2 ) outfile /tmp/user_user2.out;
adb> select user.uid, user.city, user2.zip, room.number join (user, user2, room );
adb> select user.uid, user.city, user2.zip, room.number join (user, user2, room ) limit 100;
adb> select user.uid, user.city  join (user, user2, room ) limit 100 outfile /tmp/user2room.out;
adb> select trxn.id, cust.custname, prod.name starjoin (trxn, prod, cust );


Update:
----------------------------------------------------------------------------------------------------
adb> update user set ssn='000-00-0000', addr='upda' where uid=1234 and name='abyz';
adb> update user set ssn='000-00-0000', addr='upda' where uid >= 1234;


Delete:
-------------------------------------------------------------------------------------------------
adb> delete from user where uid=1234 and name='john';
adb> delete from user where uid >= 1234;


Count:
adb> select count(*) from user;



Drop table:
---------------------------------------------------------------------------------
adb> drop table user;
adb> drop table product;


Describe table:
---------------------------------------------------------------------------------
adb> desc  user;
adb> describe  user;



HOW TO DO BENCHMARKING TESTS:
---------------------------------------------------------------------------------

abench  [-u USERNAME -p PASSWORD -h HOST:PORT -n IERATIONS -c CONCURRENCY -s SHOWFLAG]
        [-f SQLFILE] [-r I:U:S] 
    USERNAME     (username of an ArrayDB account. Default: test)
    PASSWORD     (password of an ArrayDB account. Default: test)
    HOST:PORT    (ArrayDB database host and port. Default: 127.0.0.1:8888)
    IERATIONS    (Number of query iterations. Default: 1)
    CONCURRENCY  (Number of concurrent queries in each iteration. Default: 1)
    SQLFILE      (Full path of file containing query statements.)
    SHOWFLAG     (Whether to print query results: 1 for Yes, 0 for No. Default: 0)
    SQLFILE      (Optional. File containting RQL commands.)
    I:U:S        (Optional. Number of Inserts, Updates, Selects in each test unit.)
    DATABASE     (database name: test)
    TABLE        (table name: abench)

Example:
	./abench -u test -p test  -h 127.0.0.1:8888 -r "1000:0:0" 
	(This will create table abench and insert 1000 records.)

	./abench -u test -p test -h 127.0.0.1:8888 -r "1000:10:0" 
	(This will insert 1000 records, and update 10 records.)

	./abench -u test -p test -h 127.0.0.1:8888 -r "0:0:1000" 
	(This will select data 1000 times from table abench )

	./abench -u test -p test -h 127.0.0.1:8888 -r "0:10000:1000" 
	(This will perform update 1000 times, and select 1000 times in table abench )

	./abench -u test -p test -h 127.0.0.1:8888 -c 3 -r "1000:0:0" 
	(This will insert 1000 records in 3 concurrent threads.)

	./abench -u test -p test -h 127.0.0.1:8888 -n 10 -f test.sql 
	(This will execute commands in file test.sql and repeat 10 times.)


Client C/C++ Programming Language API
======================================================================================

Build your adb client program:
    $  g++  example.cc -o example -ladbclient



Client  JAVA Programming Language JDBC API
======================================================================================

Build and run your Java client program:
    $  javac -cp $HOME/arraydb/lib/arraydb-jdbc-1.0.jar DataSourceTest.java
    $  java -Djava.library.path=$HOME/arraydb/lib -cp $HOME/arraydb/lib/arraydb-jdbc-1.0.jar:. DataSourceTest

    $  javac -cp $HOME/arraydb/lib/arraydb-jdbc-1.0.jar DriverTest.java
    $  java -Djava.library.path=$HOME/arraydb/lib -cp $HOME/arraydb/lib/arraydb-jdbc-1.0.jar:. DriverTest


=====
